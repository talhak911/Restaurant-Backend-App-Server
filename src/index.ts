import "reflect-metadata";
import { createServer } from "node:http";
import { createYoga} from "graphql-yoga";
import { buildSchema, UseMiddleware } from "type-graphql";
import { AuthResolver } from "./resolvers/authResolver";
import { RestaurantResolver } from "./resolvers/restaurantResolver";
import { CustomerResolver } from "./resolvers/customerResolver";
import { MyContext } from "./types/types";
import prisma from "../prisma/client";
import { CartResolver } from "./resolvers/cartResolver";
import { OrderResolver } from "./resolvers/orderResolver";
import { DeliveryResolver } from "./resolvers/deliveryResolver";
import {applyResolversEnhanceMap, resolvers, ResolversEnhanceMap} from '../prisma/generated/type-graphql'
import { blockAutoGeneratedResolvers } from "./middleware/middlewareForGeneratedRes";
const resolversEnhanceMap: ResolversEnhanceMap = {
  User: {
    _all: [UseMiddleware(blockAutoGeneratedResolvers)],
  },
  Customer:{
    _all: [UseMiddleware(blockAutoGeneratedResolvers)],
  },
  Food:{
    _all: [UseMiddleware(blockAutoGeneratedResolvers)],
  },
  Order:{
    _all: [UseMiddleware(blockAutoGeneratedResolvers)],
  },
 OrderItemCart:{
  _all: [UseMiddleware(blockAutoGeneratedResolvers)],
 },
 Restaurant:{
  _all: [UseMiddleware(blockAutoGeneratedResolvers)],
 }
};

applyResolversEnhanceMap(resolversEnhanceMap);
const main = async () => {
  const schema = await buildSchema({
    resolvers: [
      ...resolvers,
      AuthResolver,
      RestaurantResolver,
      CustomerResolver,
      CartResolver,
      OrderResolver,
      DeliveryResolver
    ],
    validate: false,
  });

  const yoga = createYoga({
    schema,
    context: ({ request }: MyContext) => {
      const token = request.headers.get("auth");
      return { prisma, token };
    },

    maskedErrors: false,
  });

  const server = createServer(yoga);

  server.listen(4000, () => {
    console.info("Server is running");
  });
};
main();

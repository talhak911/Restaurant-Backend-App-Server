datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
}

model User {
  id                    String    @id @default(uuid())
  email                 String    @unique
  phone                 String
  dateOfBirth           DateTime
  customer Customer?
  restaurant Restaurant?
  name                  String
  /// @TypeGraphQL.omit(output: true)
  password              String
  role                  Role
  /// @TypeGraphQL.omit(output: true, input: true)
  verificationOtp       String?
  /// @TypeGraphQL.omit(output: true, input: true)
  verificationOtpExpiry DateTime?
  /// @TypeGraphQL.omit(input: true)
  verification          Boolean   @default(false)
  /// @TypeGraphQL.omit(output: true, input: true)
  resetPassOtp          String?
  /// @TypeGraphQL.omit(output: true, input: true)
  resetPassOtpExpiry    DateTime?
}

model Customer {
  address Json[]
  picture String?
  user    User            @relation(fields: [id], references: [id])
  id      String          @id @unique
  orders  Order[]
  cart    OrderItemCart[]
}

model Restaurant {
  id             String  @id @unique
  user           User    @relation(fields: [id], references: [id])
  name           String?
  location       String?
  operatingHours String?
  menu           Food[]
  orders         Order[]
}

model Food {
  id           String          @id @default(uuid())
  name         String
  description  String
  category     FoodCategory
  price        Float
  picture      String?
  restaurant   Restaurant      @relation(fields: [restaurantId], references: [id])
  restaurantId String
  carts        OrderItemCart[]
}

model OrderItemCart {
  id         Int      @id @default(autoincrement())
  food       Food     @relation(fields: [foodId], references: [id])
  foodId     String
  quantity   Int
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
  totalPrice Float
}

model Order {
  id              Int         @id @default(autoincrement())
  customer        Customer    @relation(fields: [customerId], references: [id])
  customerId      String
  restaurant      Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId    String
  totalPrice      Float
  foods           Json
  deliveryAddress String
  deliveryPerson  String?
  deliveryTime    DateTime?
  status          OrderStatus @default(PENDING)
  createdAt       DateTime    @default(now())
}

enum OrderStatus {
  PENDING
  ACTIVE
  DELIVERED
  CANCELED
  ASSIGNED
  OUT_FOR_DELIVERY
}

enum FoodCategory {
  SNACKS
  MEAL
  VEGAN
  DESSERT
  DRINKS
}

enum Role {
  CUSTOMER
  RESTAURANT
}
